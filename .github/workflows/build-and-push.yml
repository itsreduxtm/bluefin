name: Build and Push Custom Bluefin Image

# This workflow runs when:
# 1. Code is pushed to the 'main' branch (e.g., you commit changes to your Dockerfile or other build assets).
# 2. You manually trigger it from the GitHub Actions UI.
on:
  push:
    branches:
      - main
  workflow_dispatch: # Allows manual triggering from the GitHub UI

jobs:
  build-and-push:
    runs-on: ubuntu-latest # GitHub-hosted runner, powerful enough for image builds

    permissions:
      contents: read # Allow reading repo contents
      packages: write # Allow pushing images to ghcr.io

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4 # Get your repository code

      - name: Set up QEMU (for multi-arch builds if desired, optional but good practice)
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx (for advanced build features and multi-arch)
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry (GHCR)
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }} # Uses the GitHub username of the actor triggering the workflow
          password: ${{ secrets.GITHUB_TOKEN }} # Special token provided by GitHub Actions for authentication

      - name: Build and Push Custom Bluefin Image
        uses: docker/build-push-action@v6
        with:
          context: . # Build context is the current directory (where Dockerfile is located)
          push: true # Push the image to the registry after building
          tags: | # Define the image tags
            ghcr.io/${{ github.repository }}:latest # latest tag
            ghcr.io/${{ github.repository }}:${{ github.sha }} # Tag with Git commit SHA for unique versions
          platforms: linux/amd64 # Specify architecture. Bluefin is primarily x86_64.
          cache-from: type=gha # Cache layers using GitHub Actions cache
          cache-to: type=gha,mode=max # Store layers in GitHub Actions cache for faster subsequent builds
